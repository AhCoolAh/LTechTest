//
//  LoginViewController.swift
//  LTechTest
//
//  Created by Pavel21 on 08.11.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Veil

protocol LoginDisplayLogic: AnyObject
{
    func displaySomething(viewModel: Login.Something.ViewModel)
    func displayPhoneMask(viewModel: Login.Mask.ViewModel)
    func displayLoginTry(viewModel: Login.Login.ViewModel)
    func displayAutoFillForm(viewModel: Login.Form.ViewModel)
}

class LoginViewController: UIViewController, LoginDisplayLogic {
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?

    // MARK: - Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        modalPresentationStyle = .fullScreen
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        modalPresentationStyle = .fullScreen
        setup()
    }


    // MARK: - Setup Clean Code Design Pattern 

    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: - Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        doSomething()
        getMask()
        passwordTextField.delegate = self
        phoneTextField.delegate = self
        [passwordTextField, phoneTextField].forEach({ $0.addTarget(self, action: #selector(editingChanged), for: .editingChanged) })
        NotificationCenter.default.addObserver(self, selector: #selector(self.keyboardWillShow(notification:)), name:UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(self.keyboardWillHide(notification:)), name:UIResponder.keyboardWillHideNotification, object: nil)
        autoFillForm()
    }

    // MARK: - request data from LoginInteractor

    func doSomething() {
        let request = Login.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func getMask(){
        interactor?.getMask()
    }
    
    func autoFillForm() {
        interactor?.autoFillForm()
    }

    // MARK: - display view model from LoginPresenter

    func displaySomething(viewModel: Login.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }

    func displayPhoneMask(viewModel: Login.Mask.ViewModel) {
        dateMask = Veil(pattern: viewModel.mask)
        let phoneInput = phoneTextField.text ?? ""
        if !phoneInput.contains(" "){
            phoneTextField.text = viewModel.code
        }
        print("_____triggerred mask")
    }
    
    func displayLoginTry(viewModel: Login.Login.ViewModel) {
        if viewModel.success {
            router?.routeToMainMenu()
        } else {
            stackViewErrorLabel.isHidden = false
            stackViewPasswordContainer.layer.borderColor = UIColor(named: "redColor")?.cgColor
        }
    }
    
    func displayAutoFillForm(viewModel: Login.Form.ViewModel) {

        phoneTextField.text = viewModel.phone
        passwordTextField.text = viewModel.password
        passwordText = viewModel.password
        for _ in passwordText {  hashPassword += "*" }
        nextButton.isEnabled = true
        nextButton.backgroundColor = UIColor(named: "blueColor")
        
    }


    // MARK: - Login elements and events from UI

    @IBOutlet weak var loginFormStackView: UIStackView!
    @IBOutlet weak var stackViewTopLabel: UILabel!
    @IBOutlet weak var stackViewPhoneLabel: UILabel!
    @IBOutlet weak var stackViewPhoneContainer: UIView!
    @IBOutlet weak var stackViewPasswordLabel: UILabel!
    @IBOutlet weak var stackViewPasswordContainer: UIView!
    @IBOutlet weak var stackViewErrorLabel: UILabel!
    @IBOutlet weak var phoneTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBOutlet weak var eyeButton: UIButton!
    var password: String = ""
    var copy: String = ""
    var isEyeClosed = false
    
    var passwordText = String()
    
    var hashPassword = String()
    
    var bottomButtonConstraint = NSLayoutConstraint()
    @IBOutlet weak var nextButton: UIButton!
    
    var dateMask = Veil(pattern: "###########")
    
    func setupView() {
        loginFormStackView.setCustomSpacing(24.0, after: stackViewTopLabel)
        loginFormStackView.setCustomSpacing(8.0, after: stackViewPhoneLabel)
        loginFormStackView.setCustomSpacing(24.0, after: stackViewPhoneContainer)
        loginFormStackView.setCustomSpacing(8.0, after: stackViewPasswordLabel)
        loginFormStackView.setCustomSpacing(4.0, after: stackViewPasswordContainer)
        
        stackViewPhoneContainer.layer.cornerRadius = 14
        stackViewPhoneContainer.layer.borderWidth = 1.5
        stackViewPhoneContainer.layer.borderColor = UIColor(named: "extralightGrayColor")?.cgColor
        
        stackViewPasswordContainer.layer.cornerRadius = 14
        stackViewPasswordContainer.layer.borderWidth = 1.5
        stackViewPasswordContainer.layer.borderColor = UIColor(named: "extralightGrayColor")?.cgColor
        
        stackViewErrorLabel.isHidden = true
        
        bottomButtonConstraint = nextButton.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor, constant: -16)
        bottomButtonConstraint.isActive = true
        
        nextButton.layer.cornerRadius = 13
        nextButton.backgroundColor = UIColor(named: "blueDisabledColor")
        nextButton.isEnabled = false

    }
    
    @IBAction func eyeButtonTapped(_ sender: Any) {
        
        if(!isEyeClosed) {
            isEyeClosed = true
            eyeButton.setImage(UIImage(named: "eyeCrossedIconLogin")!, for: .normal)
            togglePassword()
        } else {
            isEyeClosed = false
            eyeButton.setImage(UIImage(named: "eyeIconLogin")!, for: .normal)
            togglePassword()
        }
    }
    
    func togglePassword() {
        if(!isEyeClosed){
            passwordTextField.text = passwordText
        } else {
            passwordTextField.text = hashPassword
        }
    }
    
    @objc private func keyboardWillShow(notification: NSNotification) {
        if let keyboardSize = (notification.userInfo?[UIResponder.keyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {
            self.bottomButtonConstraint.constant = -16 - keyboardSize.height
        }
    }

    @objc private func keyboardWillHide(notification: NSNotification) {
        self.bottomButtonConstraint.constant = -16
    }
    
    @IBAction func phoneTextFieldEditingChanged(_ sender: UITextField) {
        guard let currentText = sender.text else  {
            return
        }
        sender.text = dateMask.mask(input: currentText, exhaustive: false)
    }
    
    @IBAction func loginButtonTapped(_ sender: Any) {
        let phone = phoneTextField.text ?? ""
        let password = passwordText
        let request = Login.Login.Request(phone: phone, password: password)
        interactor?.login(request: request)
    }
    
    func checkInput() {
        stackViewErrorLabel.isHidden = true
        stackViewPasswordContainer.layer.borderColor = UIColor(named: "extralightGrayColor")?.cgColor
        guard
            let phone = phoneTextField.text, !phone.isEmpty,
            let pass = passwordTextField.text, !pass.isEmpty
        else {
            nextButton.backgroundColor = UIColor(named: "blueDisabledColor")
            nextButton.isEnabled = false
            return
        }
        nextButton.backgroundColor = UIColor(named: "blueColor")
        nextButton.isEnabled = true
    }

}

// MARK: - Extensions

extension LoginViewController: UITextFieldDelegate {
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {

        if textField == passwordTextField {

            hashPassword = ""
            let newChar = string.first
            let offsetToUpdate = passwordText.index(passwordText.startIndex, offsetBy: range.location)
        
            if string == "" {
                passwordText.remove(at: offsetToUpdate)
            } else {
                passwordText.insert(newChar!, at: offsetToUpdate)
            }

            for _ in passwordText {  hashPassword += "*" }
            togglePassword()
            checkInput()
            return false
        }
        return true
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool
        {
            textField.resignFirstResponder()
            return true
        }
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        if textField == phoneTextField {
            stackViewPhoneContainer.layer.borderColor = UIColor(named: "grayColor")?.cgColor
        } else {
            stackViewPasswordContainer.layer.borderColor = UIColor(named: "grayColor")?.cgColor
        }
    }
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        if textField == phoneTextField {
            stackViewPhoneContainer.layer.borderColor = UIColor(named: "extralightGrayColor")?.cgColor
        } else {
            stackViewPasswordContainer.layer.borderColor = UIColor(named: "extralightGrayColor")?.cgColor
        }
    }
    
    @objc func editingChanged(_ textField: UITextField) {
        checkInput()
    }

}
